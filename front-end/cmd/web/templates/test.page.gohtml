{{template "base" .}}

{{define "content" }}
    <div class="container">
        <div class="row">
            <div class="col">
                <h1 class="mt-5">Test microservices</h1>
                <hr>
                <a id = "btn" class="btn btn-primary btn-lg" href = "javascript:void(0)">Test Btn</a>
                <a id = "auth-btn" class="btn btn-primary btn-lg" href = "javascript:void(0)">Test Auth</a>
                <div id="output" class="mt-5" style="outline: 1px solid silver; padding: 2em;">
                    <span class="text-muted">Output shows here...</span>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <h4 class="mt-5">Sent</h4>
                <div class="mt-1" style="outline: 1px solid silver; padding: 2em;">
                    <pre id="payload"><span class="text-muted">Nothing sent yet...</span></pre>
                </div>
            </div>
            <div class="col">
                <h4 class="mt-5">Received</h4>
                <div class="mt-1" style="outline: 1px solid silver; padding: 2em;">
                    <pre id="received"><span class="text-muted">Nothing received yet...</span></pre>
                </div>
            </div>
        </div>
    </div>
{{end}}

{{define "js"}}
    <script>
        let brokerButton = document.getElementById("btn");
        let authButton = document.getElementById("auth-btn");
        let output = document.getElementById("output");
        let sentPayloadDisplay = document.getElementById("payload");
        let receivedDisplay = document.getElementById("received");

        authButton.addEventListener("click", (e) => {
            const authPayload = {
                action : "auth",
                auth : {
                    email : "test@test.com",
                    password : "password"
                }
            }

            const headers = new Headers();
            headers.append("Content-Type", "application/json");

            const requestOptions = {
                method : "POST",
                headers : headers,
                body : JSON.stringify(authPayload)
            }

            // Display what was sent
            sentPayloadDisplay.innerHTML = JSON.stringify(authPayload, undefined, 4);
            
            // Clear previous output
            output.innerHTML = "<span class='text-muted'>Sending request to broker service...</span>";

            fetch("http:\/\/localhost:8080/handle", requestOptions)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                // Display what was received
                receivedDisplay.innerHTML = JSON.stringify(data, undefined, 4);
                
                if (data.error) {
                    output.innerHTML = `<br><strong>Error: ${data.message}</strong></br>`;
                } else {
                    output.innerHTML = `<br><strong>Response from broker: ${data.message}</strong></br>`;
                }
            })
            .catch((error) => {
                receivedDisplay.innerHTML = `{"error": true, "message": "${error.message}"}`;
                output.innerHTML = `<br><strong>Error: ${error.message}</strong></br>`;
            });
        });

        brokerButton.addEventListener("click", (e) => {
            const requestOptions = {
                method : "POST",
                headers: {
                    "Content-Type": "application/json"
                }
            }

            // Display what was sent
            sentPayloadDisplay.innerHTML = "Empty POST request";
            
            // Clear previous output
            output.innerHTML = "<span class='text-muted'>Sending request to broker service...</span>";

            fetch("http:\/\/localhost:8080", requestOptions)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                // Display what was received
                receivedDisplay.innerHTML = JSON.stringify(data, undefined, 4);
                
                if (data.error) {
                    output.innerHTML = `<br><strong>Error: ${data.message}</strong></br>`;
                } else {
                    output.innerHTML = `<br><strong>Response from broker: ${data.message}</strong></br>`;
                }
            })
            .catch((error) => {
                receivedDisplay.innerHTML = `{"error": true, "message": "${error.message}"}`;
                output.innerHTML = `<br><strong>Error: ${error.message}</strong></br>`;
            });
        });
    </script>
{{end}}
